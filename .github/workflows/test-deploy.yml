name: Test Deploy to Github Actions Runner

on:
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  deployments: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      jar_path: ${{ steps.jar.outputs.jar_path }}
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'test-deploy-to-github-runner',
              transient_environment: true,
              production_environment: false,
              auto_inactive: true,
              required_contexts: []
            });
            core.setOutput('deployment_id', deployment.data.id)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Generate properties from secrets
        shell: bash
        run: |
          echo "jwt.secretKey=$JWT_SECRETKEY" > src/main/resources/configs/auth/jwt.properties
          echo "spring.datasource.url=$SPRING_DATASOURCE_URL" > src/main/resources/configs/database/mariadb.properties
          echo "spring.datasource.username=$SPRING_DATASOURCE_USERNAME" >> src/main/resources/configs/database/mariadb.properties
          echo "spring.datasource.password=$SPRING_DATASOURCE_PASSWORD" >> src/main/resources/configs/database/mariadb.properties
        env:
          JWT_SECRETKEY: ${{ secrets.JWT_SECRET }}
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
      - name: Restore firebase admin json
        shell: bash
        run: |
          mkdir -p src/main/resources/configs/firebase
          echo "${{ secrets.FIREBASE_ADMIN_JSON_BASE64 }}" | base64 -d > src/main/resources/configs/firebase/solicare-firebase-admin.json
      - name: Build and Test with Gradle
        shell: bash
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar --info
      - name: Find built jar path
        id: jar
        shell: bash
        run: echo "jar_path=$(ls build/libs/*.jar | head -n 1)" >> $GITHUB_OUTPUT
      - name: Upload built jar
        uses: actions/upload-artifact@v4
        with:
          name: runtime-jar
          path: ${{ steps.jar.outputs.jar_path }}
          retention-days: 1
          if-no-files-found: error

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download artifact jar
        uses: actions/download-artifact@v4
        with:
          name: runtime-jar
          path: ./downloaded
      - name: Start test app on port 8080
        shell: bash
        run: |
          echo "[INFO] 임시 서버 실행 시작"
          nohup java -jar -Dserver.port=8080 $(ls ./downloaded/*.jar) > test_app.log 2>&1 &
          sleep 2
      - name: Health check on port 8080
        shell: bash
        run: |
          echo "[INFO] health check 시작"
          for i in {1..10}; do
            if curl -sSf http://localhost:8080/actuator/health > /dev/null; then
              echo "[SUCCESS] App started successfully on 8080."
              exit 0
            fi
            echo "Waiting for actuator on 8080... ($i)"
            sleep 3
          done
          echo "[ERROR] App failed to start on 8080."
          exit 1
      - name: Show and clean up test_app.log
        if: always()
        shell: bash
        run: |
          lsof -ti:8080 | xargs -r kill || true
          cat test_app.log || true
          rm -f test_app.log || true
      - name: Deployment Status Success
        if: success() && needs.build.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.build.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://api.solicare.kro.kr',
              log_url: 'https://github.com/Solicare/solicare-app-backend/actions/runs/${{ github.run_id }}'
            })
      - name: Deployment Status Failure
        if: failure() || needs.build.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.build.outputs.deployment_id }},
              state: 'failure',
              log_url: 'https://github.com/Solicare/solicare-app-backend/actions/runs/${{ github.run_id }}'
            })