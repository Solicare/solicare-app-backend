name: CI Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: self-hosted  # self-hosted runner 사용
    env:
      ENV_TEST: ${{ secrets.TEST }}
      JWT_SECRETKEY: ${{ secrets.JWT_SECRET }}
      SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      # Gradle 캐시 설정
      - name: Set up Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # gradlew 실행권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 빌드 및 테스트
      - name: Build with Gradle and Test
        run: ./gradlew clean bootJar --info

      # jar 파일 이름 고정
      - name: Rename artifact to fixed name
        shell: bash
        run: |
          JAR_PATH=$(ls build/libs/*.jar | head -n 1)
          cp "$JAR_PATH" solicare.jar
          echo "Packaged: $(ls -l solicare.jar)"

      # 기존 프로세스 종료
      - name: Stop previous application (if running)
        shell: bash
        run: |
          PID=$(lsof -ti:8080 || true)
          if [ -n "$PID" ]; then
            echo "Stopping previous application (PID: $PID)"
            kill $PID
            sleep 5 
          fi

      # jar 실행
      - name: Run builded runtime
        shell: bash
        run: |
          ssh localhost "
            cd /home/ubuntu/actions-runner/_work/solicare-app-backend/solicare-app-backend &&
            export JWT_SECRETKEY='${{ secrets.JWT_SECRET }}' &&
            export SPRING_DATASOURCE_URL='${{ secrets.DB_URL }}' &&
            export SPRING_DATASOURCE_USERNAME='${{ secrets.DB_USERNAME }}' &&
            export SPRING_DATASOURCE_PASSWORD='${{ secrets.DB_PASSWORD }}' &&
            nohup java -jar solicare.jar > app.log 2>&1 &
          "
      # 실행 로그 출력
      - name: Print app.log
        shell: bash
        run: |
          cat /home/ubuntu/actions-runner/_work/solicare-app-backend/solicare-app-backend/app.log || true

      # 8080 포트에서 정상 동작 확인
      - name: Check if app is running on 8080
        shell: bash
        run: |
          for i in {1..3}; do
            if curl -sSf http://localhost:8080/actuator/health > /dev/null; then
              echo "App is running on 8080!"
              exit 0
            fi
            echo "Waiting for app to be ready... ($i)"
            sleep 3
          done
          echo "ERROR: App is not running on 8080 or /actuator/health is not available." >&2
          exit 1
